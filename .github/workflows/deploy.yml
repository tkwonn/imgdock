name: deploy to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'public/**'
      - 'composer.json'
      - 'composer.lock'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'

env:
  AWS_REGION: us-west-2
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  APP_PATH: /var/www/html
  SESSION_NAME: deploy-${{ github.run_id }}-${{ github.run_attempt }}
  PHP_VERSION: 8.3

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use PHP 8.3 üõé
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Validate composer.json and composer.lock üëÄ
        run: composer validate --strict

      - name: Get Composer Cache Directory üìÇ
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer packages üì¶
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: Install dependencies ‚è≥
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Run PHP CS Fixer üëÄ
        run: vendor/bin/php-cs-fixer fix -v --diff --dry-run

  build-and-push-docker-image:
    needs: lint
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login to Docker Hub üê≥
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image üöÄ
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/prod/php/Dockerfile
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/imgdock-prod:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push-docker-image
    runs-on: ubuntu-22.04

    permissions:
      id-token: write
      contents: read

      env:
        ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
        SESSION_NAME: deploy-${{ github.run_id }}-${{ github.run_attempt }}
        GITHUB_BRANCH: "${{ github.ref_name }}"

    steps:
      # Checkout needed for deploy script
      - name: Checkout code for deploy script
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Application üöÄ
        run: |
          COMMANDS_JSON=$(cat << EOF
          {
           "commands": [
             "set -e",
             "sudo chown -R ubuntu:ubuntu /home/ubuntu/web/imgdock",
             "sudo -u ubuntu bash -c \"cd /home/ubuntu/web/imgdock && \\
               if [ -d /home/ubuntu/web/imgdock ]; then \\
                 cd /home/ubuntu/web/imgdock && \\
                 sudo docker stop \\\$(sudo docker ps -q) && \\
                 sudo docker compose -f compose-prod.yml down && \\
                 sudo docker system prune -af; \\
               fi && \\
               git pull origin $GITHUB_BRANCH && \\
               sudo docker compose -f compose-prod.yml pull && \\
               sudo docker compose -f compose-prod.yml up -d\""
           ]
          }
          EOF
          )
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application" \
            --parameters "$COMMANDS_JSON" \
            --region "${{ env.AWS_REGION }}" \
            --timeout-seconds 3600 \
            --query "Command.CommandId" \
            --output text)
          
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}