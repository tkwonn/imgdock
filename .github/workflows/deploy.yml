name: deploy to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'public/**'
      - 'src/**'
      - 'services/**'
      - 'composer.json'
      - 'composer.lock'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/**'

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    runs-on: ubuntu-22.04

    env:
      PHP_VERSION: 8.3
      NODE_VERSION: 20.x

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x üõé
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules üì¶
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies ‚è≥
        run: npm ci

      - name: Use PHP 8.3 üõé
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Validate composer.json and composer.lock üëÄ
        run: composer validate --strict

      - name: Get Composer Cache Directory üìÇ
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer packages üì¶
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: Install dependencies ‚è≥
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Run PHP CS Fixer üëÄ
        run: vendor/bin/php-cs-fixer fix -v --diff --dry-run

  build-and-push-docker-images:
    needs: lint
    runs-on: ubuntu-22.04

    env:
      DOCKERHUB_USERNAME: tkwonn

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Docker Hub üê≥
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image PHP üöÄ
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/prod/php/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/imgdock-prod:php-${{ github.sha }}
            ${{ env.DOCKERHUB_USERNAME }}/imgdock-prod:php-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image Nginx üöÄ
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/prod/nginx/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/imgdock-prod:nginx-${{ github.sha }}
            ${{ env.DOCKERHUB_USERNAME }}/imgdock-prod:nginx-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push-docker-images
    runs-on: ubuntu-22.04

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-west-2
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: deploy-${{ github.run_id }}-${{ github.run_attempt }}
      EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      GITHUB_BRANCH: "${{ github.ref_name }}"
      APP_ENV: prod
      CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
      VITE_BASE_URL: ${{ secrets.VITE_BASE_URL }}
      S3_BUCKET_NAME: imgdock-prod-storage
      DATABASE_HOST: ${{ secrets.DB_HOST }}
      DATABASE_NAME: imgdock
      DATABASE_USER: ${{ secrets.DB_USER }}
      DATABASE_USER_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MEMCACHED_HOST: ${{ secrets.MEMCACHED_HOST }}
      MEMCACHED_PORT: ${{ secrets.MEMCACHED_PORT }}

    steps:
      - name: Checkout for deploy script
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Application üöÄ
        run: |
          COMMANDS_JSON=$(cat << EOF
          {
            "commands": [
              "cat << 'EOCMD' > /tmp/deploy_commands.sh",
              "#!/usr/bin/env bash",
              "set -e",
              "",
              "# 1) Cleanup docker and repository",
              "chmod +x /home/ubuntu/web/imgdock/src/bin/cleanup.sh",
              "/home/ubuntu/web/imgdock/src/bin/cleanup.sh",
              "",
              "# 2) Clone New repository",
              "cd /home/ubuntu/web",
              "git clone --branch $GITHUB_BRANCH https://github.com/tkwonn/imgdock.git imgdock",
              "",
              "# 3) .env setup",
              "chmod +x /home/ubuntu/web/imgdock/src/bin/setup_env.sh",
              "export APP_ENV=\\\"${APP_ENV}\\\"",
              "export CLOUDFRONT_DOMAIN=\\\"${CLOUDFRONT_DOMAIN}\\\"",
              "export VITE_BASE_URL=\\\"${VITE_BASE_URL}\\\"",
              "export S3_BUCKET_NAME=\\\"${S3_BUCKET_NAME}\\\"",
              "export DATABASE_HOST=\\\"${DATABASE_HOST}\\\"",
              "export DATABASE_NAME=\\\"${DATABASE_NAME}\\\"",
              "export DATABASE_USER=\\\"${DATABASE_USER}\\\"",
              "export DATABASE_USER_PASSWORD=\\\"${DATABASE_USER_PASSWORD}\\\"",
              "export MEMCACHED_HOST=\\\"${MEMCACHED_HOST}\\\"",
              "export MEMCACHED_PORT=\\\"${MEMCACHED_PORT}\\\"",
              "/home/ubuntu/web/imgdock/src/bin/setup_env.sh",
              "",
              "# 4) Pull image from Docker Hub and run containers",
              "cd /home/ubuntu/web/imgdock",
              "sudo docker compose -f compose-prod.yml up -d --pull always",
              "EOCMD",
              "chmod +x /tmp/deploy_commands.sh",
              "sudo chown ubuntu:ubuntu /tmp/deploy_commands.sh",
              "sudo -u ubuntu bash -c '/tmp/deploy_commands.sh'"
            ]
          }
          EOF
          )
          
          # Send SSM Command
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application" \
            --parameters "$COMMANDS_JSON" \
            --region "${{ env.AWS_REGION }}" \
            --timeout-seconds 3600 \
            --query "Command.CommandId" \
            --output text)
          
          echo "SSM Command ID: $COMMAND_ID"
          
          # Wait for the command to finish
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}" || {
              echo "SSM command failed or timed out."
              aws ssm get-command-invocation \
                --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
                --command-id "$COMMAND_ID" \
                --region "${{ env.AWS_REGION }}" \
                --query "StandardErrorContent" \
                --output text
              exit 1
            }

          # Get the command output
          OUTPUT=$(aws ssm get-command-invocation \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --command-id "$COMMAND_ID" \
            --region "${{ env.AWS_REGION }}" \
            --query "StandardOutputContent" \
            --output text)

          echo "$OUTPUT"